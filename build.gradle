plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'se.ifmo'
version = '1'

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

// log
dependencies {
    implementation('org.springframework.boot:spring-boot-starter') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
}

// logger
//dependencies {
//    implementation 'ch.qos.logback:logback-classic:1.5.3'
//    implementation 'org.slf4j:slf4j-api:2.0.12'
//    testImplementation 'ch.qos.logback:logback-classic:1.5.3'
//}

// useful things
dependencies {
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
}

// database
dependencies {
    implementation ('org.springframework.boot:spring-boot-starter-data-jpa') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    runtimeOnly 'org.postgresql:postgresql'
}

dependencies {
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    from {
        configurations.runtimeClasspath.filter { it.exists() }.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes(
                'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' '),
                'Main-Class': 'se.ifmo.lab7.Main'
        )
    }
}